name: Sync GitHub test cases to Jira

on:
  push:
    branches:
      - main
    paths:
      - 'test-cases/**'
      - 'tools/import/sync_to_jira.py'
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: pip install pyyaml requests

      - name: Sync to Jira
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          ADD_REMOTE_LINKS: 'true'   # set to 'true' if you also want web links
        run: python tools/import/sync_to_jira.py
import os
import requests
from pathlib import Path

# Load env variables from GitHub workflow
jira_base = os.getenv("JIRA_BASE_URL")
jira_email = os.getenv("JIRA_EMAIL")
jira_token = os.getenv("JIRA_API_TOKEN")
add_links = os.getenv("ADD_REMOTE_LINKS", "false").lower() == "true"

# GitHub repo details (hardcoded, or you can also pass via workflow env)
github_repo = "sowjanya-git/qa-tests"
github_branch = "main"

# Base folder for test cases
test_cases_dir = Path("test-cases")

def extract_jira_key(file_path):
    """Reads file and extracts Jira Keys: value if present"""
    with open(file_path, "r", encoding="utf-8") as f:
        for line in f:
            if line.strip().lower().startswith("jira keys:"):
                return line.split(":", 1)[1].strip()
    return None

def create_remote_link(issue_key, github_url, title):
    """Creates remote link in Jira for a given issue"""
    payload = {
        "object": {
            "url": github_url,
            "title": title
        }
    }
    r = requests.post(
        f"{jira_base}/rest/api/3/issue/{issue_key}/remotelink",
        json=payload,
        auth=(jira_email, jira_token),
        headers={"Content-Type": "application/json"}
    )
    if r.status_code == 201:
        print(f"✅ Linked {title} to {issue_key}")
    else:
        print(f"❌ Failed to link {title} to {issue_key}: {r.status_code} {r.text}")

def main():
    if not add_links:
        print("Skipping remote links (ADD_REMOTE_LINKS=false)")
        return

    # Find all markdown files in test-cases/
    for md_file in test_cases_dir.rglob("*.md"):
        jira_key = extract_jira_key(md_file)
        if not jira_key:
            print(f"⚠️ No Jira key found in {md_file}")
            continue

        # Build GitHub raw URL for this file
        relative_path = md_file.as_posix()
        github_url = f"https://github.com/{github_repo}/blob/{github_branch}/{relative_path}"

        # Link to Jira
        create_remote_link(jira_key, github_url, md_file.name)

if __name__ == "__main__":
    main()
